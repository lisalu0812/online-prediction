{"version":3,"sources":["store/documentsSlice.js","store/selectedDocSlice.js","store/selectedRowsSlice.js","DocumentList/index.jsx","SelectorTable/index.jsx","PDH-logo-master-orange-black.png","orion-health-logo.png","Waik_Word_RGB_H.jpg","SelectItems/index.jsx","App.js","store/store.js","serviceWorker.js","index.js"],"names":["documentsSlice","createSlice","name","initialState","reducers","addDocument","state","action","content","payload","match","map","line","idx","key","index","tag","push","id","filename","setTag","doc","documentId","keys","forEach","actions","selectedDocSlice","setSelectedDoc","selectedRowsSlice","setSelectedRows","DocumentList","dispatch","useDispatch","documents","useSelector","selectedDocId","selectedDoc","useState","numDocuments","setNumDocuments","handleAddDocument","file","reader","FileReader","readAsText","onload","result","className","UploadOutlined","type","onChange","e","target","files","style","display","accept","onChangeStatus","status","meta","LayoutComponent","input","previews","submitButton","dropzoneProps","extra","maxFiles","height","dataSource","renderItem","item","onClick","Item","Meta","title","width","SelectorTable","selectedRowKeys","selectedRows","columns","dataIndex","render","color","rowSelection","pagination","hideOnSinglePage","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SelectItems","classes","React","method","setMethod","section","setSection","model","setModel","FormControl","variant","InputLabel","Select","labelId","value","event","label","MenuItem","disabled","App","gutter","span","icon","onclick","formData","setState","isLoading","fetch","headers","body","JSON","stringify","then","response","json","DownloadOutlined","csvContent","row","replace","console","log","csvFile","Blob","downloadLink","document","createElement","download","href","window","URL","createObjectURL","appendChild","click","Container","fluid","md","src","PDH_logo","alt","orion_logo","waikato_logo","configureStore","reducer","documentsReducer","selectedDocReducer","selectedRowsReducer","Boolean","location","hostname","ReactDOM","StrictMode","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72de6cf8.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const documentsSlice = createSlice({\n  name: \"documents\",\n  initialState: [],\n  reducers: {\n    addDocument: (state, action) => {\n      //let lines = action.payload.content.match(/[^\\r\\n]+/g);\n      let lines = action.payload.content.match(/(([^\\.\\?\\!\\r\\n]*\\d+\\.?\\d*[^\\.\\?\\!\\:\\r\\n]+\\s*)|([^\\.\\!\\?\\:\\r\\n]+\\s*))[\\.\\?\\!\\:\\r\\n]/g);\n      let content = lines.map((line, idx) => ({\n        key: idx,\n        index: idx,\n        content: line,\n        tag: 'O'\n      }));\n\n      state.push({\n        id: action.payload.id,\n        filename: action.payload.filename,\n        content\n      });\n    },\n    setTag: (state, action) => {\n      let doc = state[action.payload.documentId];\n      action.payload.keys.forEach(key => {\n        doc.content.forEach(line => {\n          if (key === line.key) {\n            line.tag = action.payload.tag\n          }\n        })\n      });\n    }\n  },\n});\n\nexport const { addDocument, setTag } = documentsSlice.actions;\n\nexport default documentsSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const selectedDocSlice = createSlice({\n  name: 'selectedDoc',\n  initialState: {\n      id: 0\n  },\n  reducers: {\n    setSelectedDoc: (state, action) => {\n        state.id = action.payload;\n    }\n  },\n});\n\nexport const { setSelectedDoc } = selectedDocSlice.actions;\n\nexport default selectedDocSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const selectedRowsSlice = createSlice({\n  name: 'selectedRows',\n  initialState: {\n      keys: []\n  },\n  reducers: {\n    setSelectedRows: (state, action) => {\n        state.keys = action.payload;\n    }\n  },\n});\n\nexport const { setSelectedRows } = selectedRowsSlice.actions;\n\nexport default selectedRowsSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addDocument } from \"../store/documentsSlice\";\nimport { setSelectedDoc } from \"../store/selectedDocSlice\";\nimport { List, Button } from \"antd\";\nimport \"./DocumentList.css\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { setSelectedRows } from \"../store/selectedRowsSlice\";\n\nconst DocumentList = () => {\n  const dispatch = useDispatch();\n  const documents = useSelector((state) => state.documents);\n  const selectedDocId = useSelector((state) => state.selectedDoc.id);\n  const [numDocuments, setNumDocuments] = useState(0);\n\n  const handleAddDocument = (file) => {\n    setNumDocuments((numDocuments) => numDocuments + 1);\n    let id = numDocuments;\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      let content = reader.result;\n      if (content) {\n        dispatch(\n          addDocument({\n            id,\n            filename: file.name,\n            content,\n          })\n        );\n      }\n    };\n  };\n\n  const changeSelectedDoc = (id) => {\n    dispatch(setSelectedRows([]));\n    dispatch(setSelectedDoc(id));\n  };\n\n  const Layout = ({\n    input,\n    previews,\n    submitButton,\n    dropzoneProps,\n    files,\n    extra: { maxFiles },\n  }) => {\n    return (\n      <div {...dropzoneProps} style={{ height: 700 }}>\n        <List\n          dataSource={documents}\n          renderItem={(item) => (\n            <div onClick={() => changeSelectedDoc(item.id)}>\n              <List.Item\n                className={\n                  \"list-item\" +\n                  (selectedDocId === item.id ? \" item-selected\" : \"\")\n                }\n              >\n                <List.Item.Meta\n                  className=\"list-item-meta\"\n                  title={item.filename}\n                />\n              </List.Item>\n            </div>\n          )}\n          style={{ width: \"100%\" }}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"top-title\">\n        <h2>\n          <b>Documents</b>\n          <label className=\"upload-btn\">\n            <UploadOutlined />\n            <input\n              type=\"file\"\n              onChange={(e) => handleAddDocument(e.target.files[0])}\n              style={{ display: \"none\" }}\n              accept=\".txt\"\n            />\n          </label>\n        </h2>\n      </div>\n      <div>\n        <Dropzone\n          onChangeStatus={({ meta, file }, status) => {\n            if (status === \"done\") {\n              handleAddDocument(file);\n            }\n          }}\n          accept=\".txt\"\n          LayoutComponent={Layout}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentList;\n","import React, { useState } from 'react';\nimport { Table, Tag } from 'antd';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setSelectedRows } from '../store/selectedRowsSlice'\n\nconst SelectorTable = () => {\n\n    const dispatch = useDispatch();\n    const documents = useSelector(state => state.documents);\n    const selectedDocId = useSelector(state => state.selectedDoc.id);\n    const selectedRowKeys = useSelector(state => state.selectedRows.keys);\n\n    const columns = [\n        {\n            title: '#',\n            dataIndex: 'index',\n        },\n        {\n            title: 'Content',\n            dataIndex: 'content'\n        },\n        {\n            title: 'Tag',\n            dataIndex: 'tag',\n            render: tag => {\n              let color = 'green';\n              if (tag === 'I') {\n                color = 'geekblue';\n              } else if (tag === 'B') {\n                color = 'volcano';\n              }\n              return (\n                <Tag color={color} key={tag}>\n                  {tag}\n                </Tag>\n              )\n            }\n        }\n    ]\n\n    const content = documents[selectedDocId] ? documents[selectedDocId].content : null;\n\n    const rowSelection = {\n        onChange: (selectedRowKeys, selectedRows) => {\n          dispatch(setSelectedRows(selectedRowKeys));\n        },\n        selectedRowKeys\n      };\n\n    return (\n        <div>\n          <Table\n            rowSelection={{\n              type: 'checkbox',\n              ...rowSelection,\n            }}\n            columns={columns}\n            dataSource={content}\n            pagination={{ hideOnSinglePage: true }}\n          />\n        </div>\n      );\n}\n\nexport default SelectorTable;","export default __webpack_public_path__ + \"static/media/PDH-logo-master-orange-black.78cd60a6.png\";","export default __webpack_public_path__ + \"static/media/orion-health-logo.d19969ec.png\";","export default __webpack_public_path__ + \"static/media/Waik_Word_RGB_H.15231788.jpg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Button } from 'antd';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function SelectItems() {\n  const classes = useStyles();\n  const [method, setMethod] = React.useState('');\n  const [section, setSection] = React.useState('');\n  const [model, setModel] = React.useState('');\n  const handleMethodChange = (event) => {\n    setMethod(event.target.value);\n  };\n\n  const handleSectionChange = (event) => {\n    setSection(event.target.value);\n  }\n\n  const handleModelChange = (event) => {\n      setModel(event.target.value);\n      if (event.target.value === 2){\n        \n      }\n  }\n\n  \n\n  return (\n  <div className=\"container\">\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"select-outlined-label\">Method</InputLabel>\n        <Select\n          labelId=\"select-outlined-label\"\n          id=\"select-outlined\"\n          value={method}\n          onChange={handleMethodChange}\n          label=\"Method\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={1}>Machine Learning Based</MenuItem>\n          <MenuItem value={2}>Rule Based</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl} disabled={method !== 1}>\n        <InputLabel id=\"select-disabled-label\">Model</InputLabel>\n        <Select\n          labelId=\"select-disabled-label\"\n          id=\"select-disabled\"\n          value={model}\n          onChange={handleModelChange}\n          label=\"Model\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={1}>Linear SVC</MenuItem>\n          <MenuItem value={2}>Random Forest Classifier</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"select-outlined-label\">Section</InputLabel>\n        <Select\n          labelId=\"select-outlined-label\"\n          id=\"select-outlined\"\n          value={section}\n          onChange={handleSectionChange}\n          label=\"Section\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={1}>History of Present Illness</MenuItem>\n          <MenuItem value={2}>Previous History</MenuItem>\n        </Select>\n      </FormControl>\n    \n    </div>\n  );\n}\n","import React from \"react\";\nimport { Row, Col, Card, Button } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport DocumentList from \"./DocumentList\";\nimport SelectorTable from \"./SelectorTable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setTag } from \"./store/documentsSlice\";\nimport { DownloadOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport \"./App.css\";\nimport PDH_logo from \"./PDH-logo-master-orange-black.png\";\nimport orion_logo from \"./orion-health-logo.png\";\nimport waikato_logo from \"./Waik_Word_RGB_H.jpg\";\nimport { Container } from \"react-bootstrap\";\nimport SelectItems from \"./SelectItems\";\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const documents = useSelector((state) => state.documents);\n  const selectedDocId = useSelector((state) => state.selectedDoc.id);\n\n  const exportToCSV = () => {\n    let selectedDoc = documents[selectedDocId];\n    let csvContent = \"index,content,tag\\n\";\n\n    selectedDoc.content.forEach((row) => {\n      var content = \",\"+`${row.content}`.replace(/(\\r\\n|\\n|\\r)/gm, \"\") + \",\";\n      csvContent += `${row.index}`+ content + `${row.tag}\\n`;\n    });\n\n    console.log(csvContent);\n    let csvFile = new Blob([csvContent], { type: \"text/csv\" });\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.download = selectedDoc.filename.replace(\".txt\", \".csv\");\n    downloadLink.href = window.URL.createObjectURL(csvFile);\n    downloadLink.style.display = \"none\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n  };\n\n  const uploadModel = () => {\n      // Select a model from file dialog and upload model\n  }\n\n  const onPressPredict = (event) => {\n    const formData = this.state.formData;\n    this.setState({ isLoading: true });\n    fetch('http://127.0.0.1:5000/prediction/', \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(formData)\n      })\n      .then(response => response.json())\n      .then(response => {\n        this.setState({\n          result: response.result,\n          isLoading: false\n        });\n      });\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col>\n          <h1 className=\"title\">Online Prediction Tool</h1>\n        </Col>\n      </Row>\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <DocumentList />\n          </Card>\n        </Col>\n        <Col span={17}>\n          <Card>\n            <SelectItems />\n            <Button\n                className=\"uploadModel-btn\"\n                type=\"primary\"\n                icon={<UploadOutlined />}\n                onClick={uploadModel}\n              >\n                Upload Model\n              </Button>\n            <Button \n                className=\"predict-btns\"\n                type=\"primary\"\n                onclick = {onPressPredict}>\n                Predict\n        </Button>\n          </Card>\n          <Card style={{ height: \"90%\" }}>\n            <SelectorTable />\n            \n            {documents[selectedDocId] && (\n              <Button\n                className=\"download-btn\"\n                type=\"primary\"\n                icon={<DownloadOutlined />}\n                onClick={exportToCSV}\n              >\n                Download CSV\n              </Button>\n            )}\n          </Card>\n        </Col>\n      </Row>\n      <Container fluid>\n      <Row>\n        <Col md={8}>\n          <a href=\"https://precisiondrivenhealth.com/\">\n            <img className=\"logo1\" src={PDH_logo} alt=\"PDH logo\" fluid ></img>\n          </a>\n        </Col>\n        <Col md={8}>\n          <a href=\"https://orionhealth.com/nz/\">\n          <img className=\"logo\" src={orion_logo} alt=\"Orion Health logo\" fluid></img>\n          </a>\n          </Col>\n        <Col md={8}>\n          <a href=\"https://www.waikato.ac.nz/\">\n          <img className=\"logo1\" src={waikato_logo} alt=\"Waikato Uni logo\" fluid></img>\n          </a>\n        </Col>\n      </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport documentsReducer from './documentsSlice';\nimport selectedDocReducer from './selectedDocSlice'\nimport selectedRowsReducer from './selectedRowsSlice'\n\nexport default configureStore({\n  reducer: {\n    documents: documentsReducer,\n    selectedDoc: selectedDocReducer,\n    selectedRows: selectedRowsReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}